name: Deploy to Amazon

on:
  push:
    branches: [ "qa" ]
  pull_request:
    branches: [ "qa" ]

jobs:

  make_image:
    name: Build, tag & push image to ECR
    runs-on: ubuntu-latest
    environment: production

    # Permissions needed for OIDC
    # See: https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
    permissions:
      contents: read
      id-token: write

    # Outputs to be used by other jobs
    outputs:
      image_tag: ${{ steps.image_tag.outputs.image_tag }}
      image: ${{ steps.full_tag.outputs.image }}
      masked_image: ${{ steps.maksed_full_tag.outputs.masked_image  }}


    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: fisma_db
          POSTGRES_PASSWORD: secret
          POSTGRES_USER: myuser
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/checkout@v4

      - name: Checkout code (PR version)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          # PRs do a merge commit before running the workflow, so we need to check out the code without that.
          # See: https://github.com/actions/checkout/issues/426
          ref: ${{ github.event.pull_request.head.sha }}


      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: eu-north-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_IAM_ID }}:role/github-oidc-provider-aws-benefit # Must match name of IAM Role

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Calculate image tag
        id: image_tag
        run: |
          chmod +x image-tag.sh
          echo "image_tag=$(./image-tag.sh)" >> $GITHUB_OUTPUT

      - name: Clean up commit message
        id: commit
        run: echo "message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT

      - name: Create the full tag
        id: full_tag
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REPOSITORY: benefit # Change this to your ECR repository
          IMAGE_TAG: ${{ steps.image_tag.outputs.image_tag }}
        run: |
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag and push image to Amazon ECR
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ steps.full_tag.outputs.image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          platforms: linux/arm64 # Remove this line if you are not using arm64 in aws

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache to avoid growing forever
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Debug final output in make_image
        run: |
          echo "Final output image: ${{ steps.full_tag.outputs.image }}"
          echo "Final output image_tag: ${{ steps.image_tag.outputs.image_tag }}"

      - name: Mask image output
        id: masked_full_tag
        run: |
          FULL_IMAGE="${{ steps.full_tag.outputs.image }}"
          echo "::add-mask::$FULL_IMAGE" 
          echo "masked_image=$FULL_IMAGE" >> $GITHUB_OUTPUT  

      - name: Debug encoded image output
        run: |
          echo "Final output image_tag: ${{ steps.masked_full_tag.outputs.masked_image }}"

  deploy:   #if possible rename deploy_backend
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [make_image]
    environment: production
    concurrency: production

    # Permissions needed for OIDC
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug received image
        run: |
          echo "Received image: ${{ needs.make_image.outputs.masked_image }}"

      - name: Debug received image with conditional output
        run: |
          echo "Received image: '${{ needs.make_image.outputs.masked_image || '' }}'"

      - name: Debug full_tag output
        run: | 
          echo "Full tag output: ${{ needs.make_image.outputs.image_tag }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: eu-north-1 # AWS region
          role-to-assume: arn:aws:iam::${{ secrets.AWS_IAM_ID }}:role/github-oidc-provider-aws-benefit # Must match name of IAM Role

      - name: Download task definition
        # Task definition (... --task-definition your-task-definition \)
        run: |
          aws ecs describe-task-definition --task-definition benefit-task-definition \
          --query taskDefinition > /tmp/app-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-app
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: /tmp/app-task-definition.json
          container-name: benefit # Must match name of container in Task definition ("containerDefinitions": [{"name": "container-name", ...}]
          image: ${{ needs.make_image.outputs.masked_image }}
          docker-labels: |
            SERVICE=benefit
            VERSION=${{ needs.make_image.outputs.image_tag }}

      - name: Deploy Amazon ECS task definition workers
        id: deploy-workers
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-app.outputs.task-definition }}
          cluster: benefit-ecs-cluster # Cluster name
          service: benefit-service # Service name
          wait-for-service-stability: true
          wait-for-minutes: 10


  deploy_frontend:
    name: Deploy frontend to S3 and CloudFront
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      id-token: write

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: eu-north-1  # Change to your AWS region
          role-to-assume: arn:aws:iam::${{ secrets.AWS_IAM_ID }}:role/github-oidc-provider-aws-benefit

      - name: Install dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      - name: Deploy to S3
        run: aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"